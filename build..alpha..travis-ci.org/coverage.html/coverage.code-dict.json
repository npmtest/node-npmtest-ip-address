{"/home/travis/build/npmtest/node-npmtest-ip-address/test.js":"/* istanbul instrument in package npmtest_ip_address */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ip-address/lib.npmtest_ip_address.js":"/* istanbul instrument in package npmtest_ip_address */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ip_address = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ip_address = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ip-address/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ip-address && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ip_address */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ip_address\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ip_address.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ip_address.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ip_address.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ip_address.__dirname + '/lib.npmtest_ip_address.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/ip-address.js":"'use strict';\n\nexports.Address4 = require('./lib/ipv4.js');\nexports.Address6 = require('./lib/ipv6.js');\n\nexports.v6 = {\n  helpers: require('./lib/v6/helpers.js')\n};\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/ipv4.js":"'use strict';\n\nvar BigInteger = require('jsbn').BigInteger;\nvar common = require('./common.js');\nvar padStart = require('lodash.padstart');\nvar repeat = require('lodash.repeat');\nvar sprintf = require('sprintf-js').sprintf;\nvar deprecate = require('util-deprecate');\n\nvar constants = require('./v4/constants.js');\n\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\nfunction Address4(address) {\n  this.valid = false;\n  this.address = address;\n  this.groups = constants.GROUPS;\n\n  this.v4 = true;\n\n  this.subnet = '/32';\n  this.subnetMask = 32;\n\n  var subnet = constants.RE_SUBNET_STRING.exec(address);\n\n  if (subnet) {\n    this.parsedSubnet = subnet[0].replace('/', '');\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\n    this.subnet = '/' + this.subnetMask;\n\n    if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n      this.valid = false;\n      this.error = 'Invalid subnet mask.';\n\n      return;\n    }\n\n    address = address.replace(constants.RE_SUBNET_STRING, '');\n  }\n\n  this.addressMinusSuffix = address;\n\n  this.parsedAddress = this.parse(address);\n}\n\n/*\n * Parses a v4 address\n */\nAddress4.prototype.parse = function (address) {\n  var groups = address.split('.');\n\n  if (address.match(constants.RE_ADDRESS)) {\n    this.valid = true;\n  } else {\n    this.error = 'Invalid IPv4 address.';\n  }\n\n  return groups;\n};\n\n/**\n * Return true if the address is valid\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\nAddress4.prototype.isValid = function () {\n  return this.valid;\n};\n\n/**\n * Returns the correct form of an address\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.correctForm = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  }).join('.');\n};\n\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address4\n * @instance\n * @returns {Boolean}\n */\nAddress4.prototype.isCorrect = common.isCorrect(constants.BITS);\n\n/**\n * Converts a hex string to an IPv4 address object\n * @memberof Address4\n * @static\n * @param {string} hex - a hex string to convert\n * @returns {Address4}\n */\nAddress4.fromHex = function (hex) {\n  var padded = padStart(hex.replace(/:/g, ''), 8, '0');\n  var groups = [];\n  var i;\n\n  for (i = 0; i < 8; i += 2) {\n    var h = padded.slice(i, i + 2);\n\n    groups.push(parseInt(h, 16));\n  }\n\n  return new Address4(groups.join('.'));\n};\n\n/**\n * Converts an integer into a IPv4 address object\n * @memberof Address4\n * @static\n * @param {integer} integer - a number to convert\n * @returns {Address4}\n */\nAddress4.fromInteger = function (integer) {\n  return Address4.fromHex(integer.toString(16));\n};\n\n/**\n * Converts an IPv4 address object to a hex string\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.toHex = function () {\n  return this.parsedAddress.map(function (part) {\n    return sprintf('%02x', parseInt(part, 10));\n  }).join(':');\n};\n\n/**\n * Converts an IPv4 address object to an array of bytes\n * @memberof Address4\n * @instance\n * @returns {Array}\n */\nAddress4.prototype.toArray = function () {\n  return this.parsedAddress.map(function (part) {\n    return parseInt(part, 10);\n  });\n};\n\n/**\n * Converts an IPv4 address object to an IPv6 address group\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.toGroup6 = function () {\n  var output = [];\n  var i;\n\n  for (i = 0; i < constants.GROUPS; i += 2) {\n    var hex = sprintf('%02x%02x',\n      parseInt(this.parsedAddress[i], 10),\n      parseInt(this.parsedAddress[i + 1], 10));\n\n    output.push(sprintf('%x', parseInt(hex, 16)));\n  }\n\n  return output.join(':');\n};\n\nAddress4.prototype.toV6Group =\n  deprecate(Address4.prototype.toGroup6,\n    'deprecated: `toV6Group` has been renamed to `toGroup6`');\n\n/**\n * Returns the address as a BigInteger\n * @memberof Address4\n * @instance\n * @returns {BigInteger}\n */\nAddress4.prototype.bigInteger = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return new BigInteger(this.parsedAddress.map(function (n) {\n    return sprintf('%02x', parseInt(n, 10));\n  }).join(''), 16);\n};\n\n/**\n * The first address in the range given by this address' subnet.\n * Often referred to as the Network Address.\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.startAddress = function () {\n  var startAddress = new BigInteger(this.mask() +\n    repeat(0, constants.BITS - this.subnetMask), 2);\n\n  return Address4.fromBigInteger(startAddress);\n};\n\n/**\n * The last address in the range given by this address' subnet\n * Often referred to as the Broadcast\n * @memberof Address4\n * @instance\n * @returns {Address4}\n */\nAddress4.prototype.endAddress = function () {\n  var endAddress = new BigInteger(this.mask() +\n    repeat(1, constants.BITS - this.subnetMask), 2);\n\n  return Address4.fromBigInteger(endAddress);\n};\n\n/**\n * Converts a BigInteger to a v4 address object\n * @memberof Address4\n * @static\n * @param {BigInteger} bigInteger - a BigInteger to convert\n * @returns {Address4}\n */\nAddress4.fromBigInteger = function (bigInteger) {\n  return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n};\n\n/**\n * Returns the first n bits of the address, defaulting to the\n * subnet mask\n * @memberof Address4\n * @instance\n * @returns {String}\n */\nAddress4.prototype.mask = function (optionalMask) {\n  if (optionalMask === undefined) {\n    optionalMask = this.subnetMask;\n  }\n\n  return this.getBitsBase2(0, optionalMask);\n};\n\n/**\n * Returns the bits in the given range as a base-2 string\n * @memberof Address4\n * @instance\n * @returns {string}\n */\nAddress4.prototype.getBitsBase2 = function (start, end) {\n  return this.binaryZeroPad().slice(start, end);\n};\n\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address4\n * @instance\n * @returns {boolean}\n */\nAddress4.prototype.isInSubnet = common.isInSubnet;\n\n/**\n * Returns a zero-padded base-2 string representation of the address\n * @memberof Address4\n * @instance\n * @returns {string}\n */\nAddress4.prototype.binaryZeroPad = function () {\n  return padStart(this.bigInteger().toString(2), constants.BITS, '0');\n};\n\nmodule.exports = Address4;\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/common.js":"'use strict';\n\n// A wrapper function that returns false if the address is not valid; used to\n// avoid boilerplate checks for `if (!this.valid) { return false; }`\nvar falseIfInvalid = exports.falseIfInvalid = function (fn) {\n  return function () {\n    if (!this.valid) {\n      return false;\n    }\n\n    return fn.apply(this, arguments);\n  };\n};\n\nexports.isInSubnet = falseIfInvalid(function (address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n\n  return false;\n});\n\nexports.isCorrect = function (defaultBits) {\n  return falseIfInvalid(function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n\n    return this.parsedSubnet === String(this.subnetMask);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v4/constants.js":"exports.BITS = 32;\nexports.GROUPS = 4;\n\nexports.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;\n\nexports.RE_SUBNET_STRING = /\\/\\d{1,2}$/;\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/ipv6.js":"'use strict';\n\nvar BigInteger = require('jsbn').BigInteger;\nvar find = require('lodash.find');\nvar max = require('lodash.max');\nvar merge = require('lodash.merge');\nvar padStart = require('lodash.padstart');\nvar repeat = require('lodash.repeat');\nvar sprintf = require('sprintf-js').sprintf;\nvar deprecate = require('util-deprecate');\n\nvar constants4 = require('./v4/constants.js');\nvar constants6 = require('./v6/constants.js');\n\nvar Address4 = require('./ipv4.js');\n\nfunction addCommas(number) {\n  var r = /(\\d+)(\\d{3})/;\n\n  while (r.test(number)) {\n    number = number.replace(r, '$1,$2');\n  }\n\n  return number;\n}\n\nfunction spanLeadingZeroes4(n) {\n  n = n.replace(/^(0{1,})([1-9]+)$/, '<span class=\"parse-error\">$1</span>$2');\n  n = n.replace(/^(0{1,})(0)$/, '<span class=\"parse-error\">$1</span>$2');\n\n  return n;\n}\n\n/**\n * Represents an IPv6 address\n * @class Address6\n * @param {string} address - An IPv6 address string\n * @param {number} [groups=8] - How many octets to parse\n * @example\n * var address = new Address6('2001::/32');\n */\nfunction Address6(address, optionalGroups) {\n  if (optionalGroups === undefined) {\n    this.groups = constants6.GROUPS;\n  } else {\n    this.groups = optionalGroups;\n  }\n\n  this.v4 = false;\n\n  this.subnet = '/128';\n  this.subnetMask = 128;\n\n  this.zone = '';\n\n  this.address = address;\n\n  var subnet = constants6.RE_SUBNET_STRING.exec(address);\n\n  if (subnet) {\n    this.parsedSubnet = subnet[0].replace('/', '');\n    this.subnetMask = parseInt(this.parsedSubnet, 10);\n    this.subnet = '/' + this.subnetMask;\n\n    if (isNaN(this.subnetMask) ||\n      this.subnetMask < 0 ||\n      this.subnetMask > constants6.BITS) {\n      this.valid = false;\n      this.error = 'Invalid subnet mask.';\n\n      return;\n    }\n\n    address = address.replace(constants6.RE_SUBNET_STRING, '');\n  } else if (/\\//.test(address)) {\n    this.valid = false;\n    this.error = 'Invalid subnet mask.';\n\n    return;\n  }\n\n  var zone = constants6.RE_ZONE_STRING.exec(address);\n\n  if (zone) {\n    this.zone = zone[0];\n\n    address = address.replace(constants6.RE_ZONE_STRING, '');\n  }\n\n  this.addressMinusSuffix = address;\n\n  this.parsedAddress = this.parse(this.addressMinusSuffix);\n}\n\nmerge(Address6.prototype, require('./v6/attributes.js'));\nmerge(Address6.prototype, require('./v6/html.js'));\nmerge(Address6.prototype, require('./v6/regular-expressions.js'));\n\n/**\n * Convert a BigInteger to a v6 address object\n * @memberof Address6\n * @static\n * @param {BigInteger} bigInteger - a BigInteger to convert\n * @returns {Address6}\n * @example\n * var bigInteger = new BigInteger('1000000000000');\n * var address = Address6.fromBigInteger(bigInteger);\n * address.correctForm(); // '::e8:d4a5:1000'\n */\nAddress6.fromBigInteger = function (bigInteger) {\n  var hex = padStart(bigInteger.toString(16), 32, '0');\n  var groups = [];\n  var i;\n\n  for (i = 0; i < constants6.GROUPS; i++) {\n    groups.push(hex.slice(i * 4, (i + 1) * 4));\n  }\n\n  return new Address6(groups.join(':'));\n};\n\n/**\n * Convert a URL (with optional port number) to an address object\n * @memberof Address6\n * @static\n * @param {string} url - a URL with optional port number\n * @returns {Address6}\n * @example\n * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');\n * addressAndPort.address.correctForm(); // 'ffff::'\n * addressAndPort.port; // 8080\n */\nAddress6.fromURL = function (url) {\n  var host;\n  var port;\n  var result;\n\n  // If we have brackets parse them and find a port\n  if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {\n    result = constants6.RE_URL_WITH_PORT.exec(url);\n\n    if (result === null) {\n      return {\n        error: 'failed to parse address with port',\n        address: null,\n        port: null\n      };\n    }\n\n    host = result[1];\n    port = result[2];\n  // If there's a URL extract the address\n  } else if (url.indexOf('/') !== -1) {\n    // Remove the protocol prefix\n    url = url.replace(/^[a-z0-9]+:\\/\\//, '');\n\n    // Parse the address\n    result = constants6.RE_URL.exec(url);\n\n    if (result === null) {\n      return {\n        error: 'failed to parse address from URL',\n        address: null,\n        port: null\n      };\n    }\n\n    host = result[1];\n  // Otherwise just assign the URL to the host and let the library parse it\n  } else {\n    host = url;\n  }\n\n  // If there's a port convert it to an integer\n  if (port) {\n    port = parseInt(port, 10);\n\n    //squelch out of range ports\n    if (port < 0 || port > 65536) {\n      port = null;\n    }\n  } else {\n    // Standardize `undefined` to `null`\n    port = null;\n  }\n\n  return {\n    address: new Address6(host),\n    port: port\n  };\n};\n\n/**\n * Create an IPv6-mapped address given an IPv4 address\n * @memberof Address6\n * @static\n * @param {string} address - An IPv4 address string\n * @returns {Address6}\n * @example\n * var address = Address6.fromAddress4('192.168.0.1');\n * address.correctForm(); // '::ffff:c0a8:1'\n * address.to4in6(); // '::ffff:192.168.0.1'\n */\nAddress6.fromAddress4 = function (address4) {\n  var address4 = new Address4(address4);\n\n  var mask6 = constants6.BITS - (constants4.BITS - address4.subnetMask);\n\n  return new Address6('::ffff:' + address4.correctForm() + '/' + mask6);\n};\n\n/**\n * Return an address from ip6.arpa form\n * @memberof Address6\n * @static\n * @param {string} arpaFormAddress - an 'ip6.arpa' form address \n * @returns {Adress6}\n * @example\n * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)\n * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'\n */\nAddress6.fromArpa = function (arpaFormAddress) {\n  //remove ending \".ip6.arpa.\" or just \".\"\n  var address = arpaFormAddress.replace(/(\\.ip6\\.arpa)?\\.$/, '');\n  var semicolonAmount = 7;\n\n  //correct ip6.arpa form with ending removed will be 63 characters\n  if (address.length !== 63) {\n    address = {\n      error: \"Not Valid 'ip6.arpa' form\",\n      address: null\n    };\n    return address;\n  }\n\n  address = address.split('.').reverse();\n\n  for (var i = semicolonAmount; i > 0; i--) {\n    var insertIndex = i * 4;\n    address.splice(insertIndex, 0, ':');\n  }\n\n  address = address.join('');\n  return new Address6(address);\n};\n\n/*\n * A helper function to compact an array\n */\nfunction compact (address, slice) {\n  var s1 = [];\n  var s2 = [];\n  var i;\n\n  for (i = 0; i < address.length; i++) {\n    if (i < slice[0]) {\n      s1.push(address[i]);\n    } else if (i > slice[1]) {\n      s2.push(address[i]);\n    }\n  }\n\n  return s1.concat(['compact']).concat(s2);\n}\n\n/**\n * Return the Microsoft UNC transcription of the address\n * @memberof Address6\n * @instance\n * @returns {String} the Microsoft UNC transcription of the address\n */\nAddress6.prototype.microsoftTranscription = function () {\n  return sprintf('%s.ipv6-literal.net',\n    this.correctForm().replace(/:/g, '-'));\n};\n\n/**\n * Return the first n bits of the address, defaulting to the subnet mask\n * @memberof Address6\n * @instance\n * @param {number} [mask=subnet] - the number of bits to mask\n * @returns {String} the first n bits of the address as a string\n */\nAddress6.prototype.mask = function (optionalMask) {\n  if (optionalMask === undefined) {\n    optionalMask = this.subnetMask;\n  }\n\n  return this.getBitsBase2(0, optionalMask);\n};\n\n/**\n * Return the number of possible subnets of a given size in the address\n * @memberof Address6\n * @instance\n * @param {number} [size=128] - the subnet size\n * @returns {String}\n */\n// TODO: probably useful to have a numeric version of this too\nAddress6.prototype.possibleSubnets = function (optionalSubnetSize) {\n  if (optionalSubnetSize === undefined) {\n    optionalSubnetSize = 128;\n  }\n\n  var availableBits = constants6.BITS - this.subnetMask;\n  var subnetBits = Math.abs(optionalSubnetSize - constants6.BITS);\n  var subnetPowers = availableBits - subnetBits;\n\n  if (subnetPowers < 0) {\n    return '0';\n  }\n\n  return addCommas(new BigInteger('2', 10).pow(subnetPowers).toString(10));\n};\n\n/**\n * The first address in the range given by this address' subnet\n * @memberof Address6\n * @instance\n * @returns {Address6}\n */\nAddress6.prototype.startAddress = function () {\n  var startAddress = new BigInteger(this.mask() +\n    repeat(0, constants6.BITS - this.subnetMask), 2);\n\n  return Address6.fromBigInteger(startAddress);\n};\n\n/**\n * The last address in the range given by this address' subnet\n * @memberof Address6\n * @instance\n * @returns {Address6}\n */\nAddress6.prototype.endAddress = function () {\n  var endAddress = new BigInteger(this.mask() +\n    repeat(1, constants6.BITS - this.subnetMask), 2);\n\n  return Address6.fromBigInteger(endAddress);\n};\n\n/**\n * Return the scope of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.getScope = function () {\n  var scope = constants6.SCOPES[this.getBits(12, 16)];\n\n  if (this.getType() === 'Global unicast' &&\n      scope !== 'Link local') {\n    scope = 'Global';\n  }\n\n  return scope;\n};\n\n/**\n * Return the type of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.getType = function () {\n  var self = this;\n\n  function isType(name, type) {\n    return self.isInSubnet(new Address6(type));\n  }\n\n  return find(constants6.TYPES, isType) || 'Global unicast';\n};\n\n/**\n * Return the bits in the given range as a BigInteger\n * @memberof Address6\n * @instance\n * @returns {BigInteger}\n */\nAddress6.prototype.getBits = function (start, end) {\n  return new BigInteger(this.getBitsBase2(start, end), 2);\n};\n\n/**\n * Return the bits in the given range as a base-2 string\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.getBitsBase2 = function (start, end) {\n  return this.binaryZeroPad().slice(start, end);\n};\n\n/**\n * Return the bits in the given range as a base-16 string\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.getBitsBase16 = function (start, end) {\n  var length = end - start;\n\n  if (length % 4 !== 0) {\n    return null;\n  }\n\n  return padStart(this.getBits(start, end).toString(16), length / 4, '0');\n};\n\n/**\n * Return the bits that are set past the subnet mask length\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.getBitsPastSubnet = function () {\n  return this.getBitsBase2(this.subnetMask, constants6.BITS);\n};\n\n/**\n * Return the reversed ip6.arpa form of the address\n * @memberof Address6\n * @param {Object} options\n * @param {boolean} options.omitSuffix - omit the \"ip6.arpa\" suffix\n * @instance\n * @returns {String}\n */\nAddress6.prototype.reverseForm = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  var characters = Math.floor(this.subnetMask / 4);\n\n  var reversed = this.canonicalForm()\n    .replace(/:/g, '')\n    .split('')\n    .slice(0, characters)\n    .reverse()\n    .join('.');\n\n  if (characters > 0) {\n    if (options.omitSuffix) {\n      return reversed;\n    }\n\n    return sprintf('%s.ip6.arpa.', reversed);\n  }\n\n  if (options.omitSuffix) {\n    return '';\n  }\n\n  return 'ip6.arpa.';\n};\n\n/**\n * Return the correct form of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.correctForm = function () {\n  if (!this.parsedAddress) {\n    return null;\n  }\n\n  var i;\n  var groups = [];\n\n  var zeroCounter = 0;\n  var zeroes = [];\n\n  for (i = 0; i < this.parsedAddress.length; i++) {\n    var value = parseInt(this.parsedAddress[i], 16);\n\n    if (value === 0) {\n      zeroCounter++;\n    }\n\n    if (value !== 0 && zeroCounter > 0) {\n      if (zeroCounter > 1) {\n        zeroes.push([i - zeroCounter, i - 1]);\n      }\n\n      zeroCounter = 0;\n    }\n  }\n\n  // Do we end with a string of zeroes?\n  if (zeroCounter > 1) {\n    zeroes.push([this.parsedAddress.length - zeroCounter,\n                 this.parsedAddress.length - 1]);\n  }\n\n  var zeroLengths = zeroes.map(function (n) {\n    return (n[1] - n[0]) + 1;\n  });\n\n  if (zeroes.length > 0) {\n    var index = zeroLengths.indexOf(max(zeroLengths));\n\n    groups = compact(this.parsedAddress, zeroes[index]);\n  } else {\n    groups = this.parsedAddress;\n  }\n\n  for (i = 0; i < groups.length; i++) {\n    if (groups[i] !== 'compact') {\n      groups[i] = parseInt(groups[i], 16).toString(16);\n    }\n  }\n\n  var correct = groups.join(':');\n\n  correct = correct.replace(/^compact$/, '::');\n  correct = correct.replace(/^compact|compact$/, ':');\n  correct = correct.replace(/compact/, '');\n\n  return correct;\n};\n\n/**\n * Return a zero-padded base-2 string representation of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n * @example\n * var address = new Address6('2001:4860:4001:803::1011');\n * address.binaryZeroPad();\n * // '0010000000000001010010000110000001000000000000010000100000000011\n * //  0000000000000000000000000000000000000000000000000001000000010001'\n */\nAddress6.prototype.binaryZeroPad = function () {\n  return padStart(this.bigInteger().toString(2), constants6.BITS, '0');\n};\n\n// TODO: Improve the semantics of this helper function\nAddress6.prototype.parse4in6 = function (address) {\n  var groups = address.split(':');\n  var lastGroup = groups.slice(-1)[0];\n\n  var address4 = lastGroup.match(constants4.RE_ADDRESS);\n\n  if (address4) {\n    var temp4 = new Address4(address4[0]);\n\n    for (var i = 0; i < temp4.groups; i++) {\n      if (/^0[0-9]+/.test(temp4.parsedAddress[i])) {\n        this.valid = false;\n        this.error = 'IPv4 addresses can not have leading zeroes.';\n\n        this.parseError = address.replace(constants4.RE_ADDRESS,\n          temp4.parsedAddress.map(spanLeadingZeroes4).join('.'));\n\n        return null;\n      }\n    }\n\n    this.v4 = true;\n\n    groups[groups.length - 1] = temp4.toGroup6();\n\n    address = groups.join(':');\n  }\n\n  return address;\n};\n\n// TODO: Make private?\nAddress6.prototype.parse = function (address) {\n  address = this.parse4in6(address);\n\n  if (this.error) {\n    return null;\n  }\n\n  var badCharacters = address.match(constants6.RE_BAD_CHARACTERS);\n\n  if (badCharacters) {\n    this.valid = false;\n    this.error = sprintf('Bad character%s detected in address: %s',\n      badCharacters.length > 1 ? 's' : '', badCharacters.join(''));\n\n    this.parseError = address.replace(constants6.RE_BAD_CHARACTERS,\n      '<span class=\"parse-error\">$1</span>');\n\n    return null;\n  }\n\n  var badAddress = address.match(constants6.RE_BAD_ADDRESS);\n\n  if (badAddress) {\n    this.valid = false;\n    this.error = sprintf('Address failed regex: %s', badAddress.join(''));\n\n    this.parseError = address.replace(constants6.RE_BAD_ADDRESS,\n      '<span class=\"parse-error\">$1</span>');\n\n    return null;\n  }\n\n  var groups = [];\n\n  var halves = address.split('::');\n\n  if (halves.length === 2) {\n    var first = halves[0].split(':');\n    var last = halves[1].split(':');\n\n    if (first.length === 1 &&\n      first[0] === '') {\n      first = [];\n    }\n\n    if (last.length === 1 &&\n      last[0] === '') {\n      last = [];\n    }\n\n    var remaining = this.groups - (first.length + last.length);\n\n    if (!remaining) {\n      this.valid = false;\n      this.error = 'Error parsing groups';\n\n      return null;\n    }\n\n    this.elidedGroups = remaining;\n\n    this.elisionBegin = first.length;\n    this.elisionEnd = first.length + this.elidedGroups;\n\n    first.forEach(function (group) {\n      groups.push(group);\n    });\n\n    for (var i = 0; i < remaining; i++) {\n      groups.push(0);\n    }\n\n    last.forEach(function (group) {\n      groups.push(group);\n    });\n  } else if (halves.length === 1) {\n    groups = address.split(':');\n\n    this.elidedGroups = 0;\n  } else {\n    this.valid = false;\n    this.error = 'Too many :: groups found';\n\n    return null;\n  }\n\n  groups = groups.map(function (g) {\n    return sprintf('%x', parseInt(g, 16));\n  });\n\n  if (groups.length !== this.groups) {\n    this.valid = false;\n    this.error = 'Incorrect number of groups found';\n\n    return null;\n  }\n\n  this.valid = true;\n\n  return groups;\n};\n\nfunction paddedHex(octet) {\n  return sprintf('%04x', parseInt(octet, 16));\n}\n\n/**\n * Return the canonical form of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.canonicalForm = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return this.parsedAddress.map(paddedHex).join(':');\n};\n\n/**\n * Return the decimal form of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.decimal = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return this.parsedAddress.map(function (n) {\n    return sprintf('%05d', parseInt(n, 16));\n  }).join(':');\n};\n\n/**\n * Return the address as a BigInteger\n * @memberof Address6\n * @instance\n * @returns {BigInteger}\n */\nAddress6.prototype.bigInteger = function () {\n  if (!this.valid) {\n    return null;\n  }\n\n  return new BigInteger(this.parsedAddress.map(paddedHex).join(''), 16);\n};\n\n/**\n * Return the last two groups of this address as an IPv4 address string\n * @memberof Address6\n * @instance\n * @returns {String}\n * @example\n * var address = new Address6('2001:4860:4001::1825:bf11');\n * address.to4(); // '24.37.191.17'\n */\nAddress6.prototype.to4 = function () {\n  var binary = this.binaryZeroPad().split('');\n\n  return Address4.fromHex(new BigInteger(binary.slice(96, 128)\n    .join(''), 2).toString(16));\n};\n\nAddress6.prototype.tov4 =\n  deprecate(Address6.prototype.to4,\n    'deprecated: `tov4` has been renamed to `to4`');\n\n/**\n * Return the v4-in-v6 form of the address\n * @memberof Address6\n * @instance\n * @returns {String}\n */\nAddress6.prototype.to4in6 = function () {\n  var address4 = this.to4();\n  var address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6);\n\n  var correct = address6.correctForm();\n\n  var infix = '';\n\n  if (!/:$/.test(correct)) {\n    infix = ':';\n  }\n\n  return address6.correctForm() + infix + address4.address;\n};\n\nAddress6.prototype.v4inv6 =\n  deprecate(Address6.prototype.to4in6,\n    'deprecated: `v4inv6` has been renamed to `to4in6`');\n\n/**\n * Return an object containing the Teredo properties of the address\n * @memberof Address6\n * @instance\n * @returns {Object}\n */\nAddress6.prototype.inspectTeredo = function () {\n  /*\n  - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).\n  - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that\n    is used.\n  - Bits 64 to 79 can be used to define some flags. Currently only the\n    higher order bit is used; it is set to 1 if the Teredo client is\n    located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista\n    and Windows Server 2008 implementations, more bits are used. In those\n    implementations, the format for these 16 bits is \"CRAAAAUG AAAAAAAA\",\n    where \"C\" remains the \"Cone\" flag. The \"R\" bit is reserved for future\n    use. The \"U\" bit is for the Universal/Local flag (set to 0). The \"G\" bit\n    is Individual/Group flag (set to 0). The A bits are set to a 12-bit\n    randomly generated number chosen by the Teredo client to introduce\n    additional protection for the Teredo node against IPv6-based scanning\n    attacks.\n  - Bits 80 to 95 contains the obfuscated UDP port number. This is the\n    port number that is mapped by the NAT to the Teredo client with all\n    bits inverted.\n  - Bits 96 to 127 contains the obfuscated IPv4 address. This is the\n    public IPv4 address of the NAT with all bits inverted.\n  */\n  var prefix = this.getBitsBase16(0, 32);\n\n  var udpPort = this.getBits(80, 96).xor(new BigInteger('ffff', 16)).toString();\n\n  var server4 = Address4.fromHex(this.getBitsBase16(32, 64));\n  var client4 = Address4.fromHex(this.getBits(96, 128)\n    .xor(new BigInteger('ffffffff', 16)).toString(16));\n\n  var flags = this.getBits(64, 80);\n  var flagsBase2 = this.getBitsBase2(64, 80);\n\n  var coneNat = flags.testBit(15);\n  var reserved = flags.testBit(14);\n  var groupIndividual = flags.testBit(8);\n  var universalLocal = flags.testBit(9);\n  var nonce = new BigInteger(flagsBase2.slice(2, 6) +\n    flagsBase2.slice(8, 16), 2).toString(10);\n\n  return {\n    prefix: sprintf('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),\n    server4: server4.address,\n    client4: client4.address,\n    flags: flagsBase2,\n    coneNat: coneNat,\n    microsoft: {\n      reserved: reserved,\n      universalLocal: universalLocal,\n      groupIndividual: groupIndividual,\n      nonce: nonce\n    },\n    udpPort: udpPort\n  };\n};\n\nAddress6.prototype.teredo =\n  deprecate(Address6.prototype.inspectTeredo,\n    'deprecated: `teredo` has been renamed to `inspectTeredo`');\n\n/**\n * Return an object containing the 6to4 properties of the address\n * @memberof Address6\n * @instance\n * @returns {Object}\n */\nAddress6.prototype.inspect6to4 = function () {\n  /*\n  - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).\n  - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.\n  */\n\n  var prefix = this.getBitsBase16(0, 16);\n\n  var gateway = Address4.fromHex(this.getBitsBase16(16, 48));\n\n  return {\n    prefix: sprintf('%s', prefix.slice(0, 4)),\n    gateway: gateway.address\n  };\n};\n\nAddress6.prototype.six2four =\n  deprecate(Address6.prototype.inspect6to4,\n    'deprecated: `six2four` has been renamed to `inspect6to4`');\n\n/**\n * Return a v6 6to4 address from a v6 v4inv6 address\n * @memberof Address6\n * @instance\n * @returns {Address6}\n */\nAddress6.prototype.to6to4 = function () {\n  if (!this.is4()) {\n    return null;\n  }\n\n  var addr6to4 = [\n    '2002',\n    this.getBitsBase16(96, 112),\n    this.getBitsBase16(112, 128),\n    '',\n    '/16'\n  ].join(':');\n\n  return new Address6(addr6to4);\n};\n\nAddress6.prototype.get6to4 =\n  deprecate(Address6.prototype.to6to4,\n    'deprecated: `get6to4` has been renamed to `to6to4`');\n\n/**\n * Return a byte array\n * @memberof Address6\n * @instance\n * @returns {Array}\n */\nAddress6.prototype.toByteArray = function () {\n  var byteArray = this.bigInteger().toByteArray();\n\n  // work around issue where `toByteArray` returns a leading 0 element\n  if (byteArray.length === 17 && byteArray[0] === 0) {\n    return byteArray.slice(1);\n  }\n\n  return byteArray;\n};\n\nfunction unsignByte(b) {\n  return b & 0xFF;\n}\n\n/**\n * Return an unsigned byte array\n * @memberof Address6\n * @instance\n * @returns {Array}\n */\nAddress6.prototype.toUnsignedByteArray = function () {\n  return this.toByteArray().map(unsignByte);\n};\n\n/**\n * Convert a byte array to an Address6 object\n * @memberof Address6\n * @static\n * @returns {Address6}\n */\nAddress6.fromByteArray = function (bytes) {\n  return this.fromUnsignedByteArray(bytes.map(unsignByte));\n};\n\n/**\n * Convert an unsigned byte array to an Address6 object\n * @memberof Address6\n * @static\n * @returns {Address6}\n */\nAddress6.fromUnsignedByteArray = function (bytes) {\n  var BYTE_MAX = new BigInteger('256', 10);\n  var result = new BigInteger('0', 10);\n  var multiplier = new BigInteger('1', 10);\n\n  for (var i = bytes.length - 1; i >= 0; i--) {\n    result = result.add(\n      multiplier.multiply(new BigInteger(bytes[i].toString(10), 10)));\n\n    multiplier = multiplier.multiply(BYTE_MAX);\n  }\n\n  return Address6.fromBigInteger(result);\n};\n\nmodule.exports = Address6;\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v6/constants.js":"exports.BITS = 128;\nexports.GROUPS = 8;\n\n/**\n * Represents IPv6 address scopes\n * @memberof Address6\n * @static\n */\nexports.SCOPES = {\n  0: 'Reserved',\n  1: 'Interface local',\n  2: 'Link local',\n  4: 'Admin local',\n  5: 'Site local',\n  8: 'Organization local',\n  15: 'Global',\n  16: 'Reserved'\n};\n\n/**\n * Represents IPv6 address types\n * @memberof Address6\n * @static\n */\nexports.TYPES = {\n  'ff01::1/128': 'Multicast (All nodes on this interface)',\n  'ff01::2/128': 'Multicast (All routers on this interface)',\n  'ff02::1/128': 'Multicast (All nodes on this link)',\n  'ff02::2/128': 'Multicast (All routers on this link)',\n  'ff05::2/128': 'Multicast (All routers in this site)',\n  'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',\n  'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',\n  'ff02::9/128': 'Multicast (RIP routers)',\n  'ff02::a/128': 'Multicast (EIGRP routers)',\n  'ff02::d/128': 'Multicast (PIM routers)',\n  'ff02::16/128': 'Multicast (MLDv2 reports)',\n  'ff01::fb/128': 'Multicast (mDNSv6)',\n  'ff02::fb/128': 'Multicast (mDNSv6)',\n  'ff05::fb/128': 'Multicast (mDNSv6)',\n  'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',\n  'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',\n  'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',\n  'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',\n  '::/128': 'Unspecified',\n  '::1/128': 'Loopback',\n  'ff00::/8': 'Multicast',\n  'fe80::/10': 'Link-local unicast'\n};\n\n/**\n * A regular expression that matches bad characters in an IPv6 address\n * @memberof Address6\n * @static\n */\nexports.RE_BAD_CHARACTERS = /([^0-9a-f:\\/%])/ig;\n\n/**\n * A regular expression that matches an incorrect IPv6 address\n * @memberof Address6\n * @static\n */\nexports.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/ig;\n\n/**\n * A regular expression that matches an IPv6 subnet\n * @memberof Address6\n * @static\n */\nexports.RE_SUBNET_STRING = /\\/\\d{1,3}(?=%|$)/;\n\n/**\n * A regular expression that matches an IPv6 zone\n * @memberof Address6\n * @static\n */\nexports.RE_ZONE_STRING = /%.*$/;\n\nexports.RE_URL = new RegExp(/^\\[{0,1}([0-9a-f:]+)\\]{0,1}/);\nexports.RE_URL_WITH_PORT = new RegExp(/\\[([0-9a-f:]+)\\]:([0-9]{1,5})/);\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v6/attributes.js":"'use strict';\n\nvar common = require('../common.js');\nvar v6 = require('./constants.js');\n\n/**\n * Returns true if the address is valid, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isValid = function () {\n  return this.valid;\n};\n\n/**\n * Returns true if the given address is in the subnet of the current address\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isInSubnet = common.isInSubnet;\n\n/**\n * Returns true if the address is correct, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isCorrect = common.isCorrect(v6.BITS);\n\n/**\n * Returns true if the address is in the canonical form, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isCanonical = common.falseIfInvalid(function () {\n  return this.addressMinusSuffix === this.canonicalForm();\n});\n\n/**\n * Returns true if the address is a link local address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isLinkLocal = common.falseIfInvalid(function () {\n  // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'\n  if (this.getBitsBase2(0, 64) ===\n    '1111111010000000000000000000000000000000000000000000000000000000') {\n    return true;\n  }\n\n  return false;\n});\n\n/**\n * Returns true if the address is a multicast address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isMulticast = common.falseIfInvalid(function () {\n  return this.getType() === 'Multicast';\n});\n\n/**\n * Returns true if the address is a v4-in-v6 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.is4 = common.falseIfInvalid(function () {\n  return this.v4;\n});\n\n/**\n * Returns true if the address is a Teredo address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isTeredo = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2001::/32'));\n});\n\n/**\n * Returns true if the address is a 6to4 address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.is6to4 = common.falseIfInvalid(function () {\n  return this.isInSubnet(new this.constructor('2002::/16'));\n});\n\n/**\n * Returns true if the address is a loopback address, false otherwise\n * @memberof Address6\n * @instance\n * @returns {boolean}\n */\nexports.isLoopback = common.falseIfInvalid(function () {\n  return this.getType() === 'Loopback';\n});\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v6/html.js":"'use strict';\n\nvar constants4 = require('../v4/constants.js');\nvar helpers = require('./helpers.js');\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the address in link form with a default port of 80\n */\nexports.href = function (optionalPort) {\n  if (optionalPort === undefined) {\n    optionalPort = '';\n  } else {\n    optionalPort = sprintf(':%s', optionalPort);\n  }\n\n  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n};\n\n/**\n * @returns {String} a link suitable for conveying the address via a URL hash\n */\nexports.link = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.className === undefined) {\n    options.className = '';\n  }\n\n  if (options.prefix === undefined) {\n    options.prefix = '/#address=';\n  }\n\n  if (options.v4 === undefined) {\n    options.v4 = false;\n  }\n\n  var formFunction = this.correctForm;\n\n  if (options.v4) {\n    formFunction = this.to4in6;\n  }\n\n  if (options.className) {\n    return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>',\n      options.prefix, formFunction.call(this), options.className);\n  }\n\n  return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix,\n    formFunction.call(this));\n};\n\n/**\n * Groups an address\n * @returns {String}\n */\nexports.group = function () {\n  var address4 = this.address.match(constants4.RE_ADDRESS);\n  var i;\n\n  if (address4) {\n    // The IPv4 case\n    var segments = address4[0].split('.');\n\n    this.address = this.address.replace(constants4.RE_ADDRESS,\n      sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>' +\n        '.' +\n        '<span class=\"hover-group group-v4 group-7\">%s</span>',\n        segments.slice(0, 2).join('.'),\n        segments.slice(2, 4).join('.')));\n  }\n\n  if (this.elidedGroups === 0) {\n    // The simple case\n    return helpers.simpleGroup(this.address);\n  }\n\n  // The elided case\n  var output = [];\n\n  var halves = this.address.split('::');\n\n  if (halves[0].length) {\n    output.push(helpers.simpleGroup(halves[0]));\n  } else {\n    output.push('');\n  }\n\n  var classes = ['hover-group'];\n\n  for (i = this.elisionBegin;\n       i < this.elisionBegin + this.elidedGroups; i++) {\n    classes.push(sprintf('group-%d', i));\n  }\n\n  output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n\n  if (halves[1].length) {\n    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));\n  } else {\n    output.push('');\n  }\n\n  return output.join(':');\n};\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v6/helpers.js":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nvar spanAllZeroes = exports.spanAllZeroes = function (s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n};\n\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexports.spanAll = function (s, optionalOffset) {\n  if (optionalOffset === undefined) {\n    optionalOffset = 0;\n  }\n\n  var letters = s.split('');\n\n  return letters.map(function (n, i) {\n    return sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n,\n      i + optionalOffset,\n      spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?\n  }).join('');\n};\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexports.spanLeadingZeroes = function (address) {\n  var groups = address.split(':');\n\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n};\n\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexports.simpleGroup = function (addressString, offset) {\n  var groups = addressString.split(':');\n\n  if (!offset) {\n    offset = 0;\n  }\n\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>',\n      i + offset,\n      spanLeadingZeroesSimple(g));\n  }).join(':');\n};\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/lib/v6/regular-expressions.js":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  });\n\n  // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = (i === 0 || i === v6.GROUPS - 1) ? ':' : '';\n\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  });\n\n  // The simplest case\n  possibilities.push(groups.map(padGroup).join(':'));\n\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n\n  var possibilities = [];\n\n  // 1. elision of everything (::)\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  }\n\n  // 2. complete elision of the middle\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  }\n\n  // 4. elision from the left side\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n\n  // 5. elision from the right side\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n\n  // 6. no elision\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n\n  // 7. elision (including sloppy elision) from the middle\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',\n                                 position,\n                                 elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n\n/**\n * Generate a regular expression string that can be used to find or validate\n * all variations of this address\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {string}\n */\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = [];\n\n  // TODO: revisit why this is necessary\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups,\n                         halves[0].length !== 0,\n                         halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\n  }\n\n  return output.join('');\n};\n\n/**\n * Generate a regular expression that can be used to find or validate all\n * variations of this address.\n * @memberof Address6\n * @instance\n * @param {string} optionalSubString\n * @returns {RegExp}\n */\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};\n","/home/travis/build/npmtest/node-npmtest-ip-address/node_modules/ip-address/ip-address-globals.js":"'use strict';\n\nvar ip = require('./ip-address.js');\n\nwindow.Address4 = ip.Address4;\nwindow.Address6 = ip.Address6;\n\nwindow.v6 = ip.v6;\n"}